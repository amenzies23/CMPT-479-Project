name: "CI/CD Pipeline"

on:
  push:  # runs on every push to any branch
  pull_request:
    branches: [ main, develop ]  # PRs only to main/develop

jobs:
  build-and-test:
    name: "Build and Test (Docker)"
    runs-on: ubuntu-latest
    steps:
    - name: "STEP 0: Checkout & Prepare Environment"
      uses: actions/checkout@v4
    - name: "STEP 1: Set up Docker Buildx"
      uses: docker/setup-buildx-action@v3

    - name: "STEP 2: Build Docker Image"
      uses: docker/build-push-action@v5
      with:
        context: .
        push: false
        load: true
        tags: apr-system:latest
        cache-from: type=gha,scope=apr-system
        cache-to: type=gha,mode=max,scope=apr-system

    - name: "STEP 3: Verify Docker Image"
      run: |
        echo "=== Docker Image Verification ==="
        docker images | grep apr-system
        docker run --rm apr-system:latest bash -c "
          echo 'Environment Check:'
          echo 'CMake:' && cmake --version
          echo 'GCC:' && gcc --version
          echo 'Clang:' && clang --version
          echo 'Boost:' && find /usr -name 'boost' -type d 2>/dev/null | head -1
          echo 'Libraries:' && pkg-config --list-all | grep -E '(nlohmann|fmt|spdlog)' || echo 'Libraries found via pkg-config'
          echo 'GTest Check:' && pkg-config --list-all | grep gtest || echo 'GTest not found via pkg-config'
        "

    - name: "STEP 4: Build & Test in Docker"
      run: |
        docker run --rm \
          -v ${{ github.workspace }}:/workspace \
          -w /workspace \
          apr-system:latest bash -c "
            set -e
            echo 'Building project...'
            mkdir -p build && cd build
            cmake .. -DCMAKE_BUILD_TYPE=Release
            make -j$(nproc)
            echo 'Build completed successfully'
            echo 'Running tests...'
            ./bin/apr_tests --gtest_output=xml:test_results.xml --gtest_verbose
            echo 'Tests completed successfully'
          "

    - name: "STEP 5: APR System Functional Checks"
      run: |
        docker run --rm \
          -v ${{ github.workspace }}:/workspace \
          -w /workspace \
          apr-system:latest bash -c "
            set -e
            echo 'Testing APR system...'
            cd build
            ./bin/apr_system --help
            echo 'APR system help test passed'
            echo 'Running end-to-end APR test...'
            ./bin/apr_system \
              --repo-url 'https://github.com/test/ci-example' \
              --output-dir './ci-results' \
              --verbose
            echo 'End-to-end test completed'
          "

    - name: "STEP 6: Verify & Upload Artifacts"
      run: |
        docker run --rm \
          -v ${{ github.workspace }}:/workspace \
          -w /workspace \
          apr-system:latest bash -c "
            set -e
            echo 'Verifying output files...'
            cd build
            ls -la logs/apr_system.log
            ls -la ci-results/pipeline_results.json
            test -s logs/apr_system.log
            python3 -m json.tool ci-results/pipeline_results.json > /dev/null
            echo 'Output verification passed'
          "
      # Upload test results
    - name: "Upload test results"
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: "test-results"
        path: build/test_results.xml
      # Upload build artifacts
    - name: "Upload build artifacts"
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: "build-artifacts"
        path: |
          build/bin/
          build/lib/
          build/logs/
          build/ci-results/

    - name: "STEP 7: Debug on Failure"
      if: failure()
      run: |
        echo "=== Failure Debug Information ==="
        docker run --rm \
          -v ${{ github.workspace }}:/workspace \
          -w /workspace \
          apr-system:latest bash -c "
            echo 'Container environment:'
            pwd && ls -la
            echo 'Build directory contents:'
            ls -la build/ || echo 'Build directory not found'
            echo 'Available executables:'
            find build/bin/ -name 'apr_system' -o -name 'apr_tests' 2>/dev/null || echo 'No executables found in bin/'
            echo 'Library files:'
            ls -la build/lib/ || echo 'No lib directory found'
            echo 'System information:'
            uname -a
            echo 'Disk usage:'
            df -h
            echo 'Memory usage:'
            free -h
          " 