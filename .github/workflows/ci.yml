name: "CI/CD Pipeline"

on:
  push:  # runs on every push to any branch
  pull_request:
    branches: [ main, develop ]  # PRs only to main/develop

# prevent duplicate runs - cancel previous runs when new commits are pushed
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: ${{ github.ref != 'refs/heads/main' }}

# set permissions for the workflow
permissions:
  contents: read
  packages: write  # allow pushing to GHCR

jobs:
  build-and-test:
    name: "Build and Test (Docker)"
    runs-on: ubuntu-latest
    steps:
    - name: "STEP 0: Checkout & Prepare Environment"
      uses: actions/checkout@v4
    - name: "STEP 1: Set up Docker Buildx"
      uses: docker/setup-buildx-action@v3
      
    - name: "Login to GitHub Container Registry"
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: "STEP 2: Build Docker Image"
      uses: docker/build-push-action@v5
      with:
        context: .
        push: false
        load: true
        tags: apr-system:latest
        # use only github actions cache for now to avoid registry permission issues
        cache-from: |
          type=gha,scope=apr-system-global
        cache-to: |
          type=gha,mode=max,scope=apr-system-global

    - name: "STEP 3: Verify Docker Image"
      run: |
        echo "=== Docker Image Verification ==="
        docker images | grep apr-system
        echo "=== Cache Information ==="
        docker buildx du
        docker run --rm apr-system:latest bash -c "
          echo 'Environment Check:'
          echo 'CMake:' && cmake --version
          echo 'GCC:' && gcc --version
          echo 'Libraries:' && pkg-config --list-all | grep -E '(nlohmann|fmt)' || echo 'Core libraries available'
          echo 'GTest Check:' && find /usr -name 'libgtest*' 2>/dev/null | head -1 || echo 'GTest installed'
          echo 'spdlog Check:' && find /usr/local -name '*spdlog*' 2>/dev/null | head -1 || echo 'spdlog installed'
        "

    - name: "STEP 4: Build & Test in Docker"
      run: |
        docker run --rm \
          -v ${{ github.workspace }}:/workspace \
          -w /workspace \
          apr-system:latest bash -c "
            set -e
            echo 'Building project...'
            mkdir -p build && cd build
            cmake .. -DCMAKE_BUILD_TYPE=Release
            make -j$(nproc)
            echo 'Build completed successfully'
            echo 'Running tests...'
            ./bin/apr_tests --gtest_output=xml:test_results.xml --gtest_verbose
            echo 'Tests completed successfully'
          "
      env:
        # skip if this is a PR and the branch already passed CI
        SKIP_IF_PASSED: ${{ github.event_name == 'pull_request' }}

    # - name: "STEP X: Run SBFL Analysis"
    #   run: |
    #     docker run --rm \
    #       -v ${{ github.workspace }}:/workspace \
    #       -w /workspace \
    #       apr-system:latest bash -c "
    #         set -e
    #         echo 'Running SBFL Analysis...'
    #         /.venv/bin/python src/sbfl/sbfl_analysis.py
    #         echo 'SBFL analysis completed'
    #       "

    - name: "STEP 5: APR System Functional Checks"
      run: |
        docker run --rm \
          -v ${{ github.workspace }}:/workspace \
          -w /workspace \
          apr-system:latest bash -c "
            set -e
            echo 'Testing APR system...'
            cd build
            ./bin/apr_system --help
            echo 'APR system help test passed'
            echo 'Running end-to-end APR test...'
            ./bin/apr_system \
              --repo-url 'https://github.com/test/ci-example' \
              --output-dir './ci-results' \
              --verbose
            echo 'End-to-end test completed'
          "

    - name: "STEP 6: Verify & Upload Artifacts"
      run: |
        docker run --rm \
          -v ${{ github.workspace }}:/workspace \
          -w /workspace \
          apr-system:latest bash -c "
            set -e
            echo 'Verifying output files...'
            cd build
            ls -la logs/apr_system.log
            ls -la ci-results/pipeline_results.json
            test -s logs/apr_system.log
            echo 'Output verification passed'
          "
      # upload test results
    - name: "Upload test results"
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: "test-results"
        path: build/test_results.xml
      # upload build artifacts
    - name: "Upload build artifacts"
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: "build-artifacts"
        path: |
          build/bin/
          build/lib/
          build/logs/
          build/ci-results/

    - name: "STEP 7: Debug on Failure"
      if: failure()
      run: |
        echo "=== Failure Debug Information ==="
        docker run --rm \
          -v ${{ github.workspace }}:/workspace \
          -w /workspace \
          apr-system:latest bash -c "
            echo 'Container environment:'
            pwd && ls -la
            echo 'Build directory contents:'
            ls -la build/ || echo 'Build directory not found'
            echo 'Available executables:'
            find build/bin/ -name 'apr_system' -o -name 'apr_tests' 2>/dev/null || echo 'No executables found in bin/'
            echo 'Library files:'
            ls -la build/lib/ || echo 'No lib directory found'
            echo 'System information:'
            uname -a
            echo 'Disk usage:'
            df -h
            echo 'Memory usage:'
            free -h
          " 